# Copyright 2022 Giuseppe De Palma, Matteo Trentin
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The version of Alpine to use for the final image
# This should match the version of Alpine that the `elixir:1.14-alpine` image uses
ARG ALPINE_VERSION=3.16
ARG SECRET_KEY_BASE

FROM elixir:1.13-alpine AS builder

ARG MIX_ENV=prod

ENV MIX_ENV=${MIX_ENV} \
    SECRET_KEY_BASE=${SECRET_KEY_BASE}

# By convention, /opt is typically used for applications
WORKDIR /opt/app

# This step installs all the build tools we'll need
RUN apk update && \
    apk upgrade --no-cache && \
    apk add --no-cache git build-base bash curl openssl ncurses-libs libgcc && \
    mix local.rebar --force && \
    mix local.hex --force

# Get Rust
RUN curl https://sh.rustup.rs -sSf | bash -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"
ENV RUSTFLAGS='--codegen target-feature=-crt-static'

# This copies our app source code into the build container
COPY . .

RUN mix deps.get --only $MIX_ENV
RUN mix compile
RUN mix release core

# From this line onwards, we're in a new image, which will be the image used in production
FROM alpine:${ALPINE_VERSION}

ARG MIX_ENV=prod
ARG SECRET_KEY_BASE
ARG PORT=4000
ARG NODE_IP=""
ARG DEPLOY_ENV=""

# The name of your application/release (required)
RUN apk update && \
    apk upgrade && \
    apk add --no-cache libstdc++ libgcc ncurses-libs

ENV REPLACE_OS_VARS=true \
    USER=funless \
    MIX_ENV=${MIX_ENV} \ 
    SECRET_KEY_BASE=${SECRET_KEY_BASE} \
    PORT=${PORT} \
    NODE_IP=${NODE_IP} \
    DEPLOY_ENV=${DEPLOY_ENV} \
    PGUSER=postgres \
    PGPASSWORD=postgres \
    PGDATABASE=funless \
    PGHOST=postgres \
    PGPORT=5432


WORKDIR "/home/${USER}/app"
# Creates an unprivileged user to be used exclusively to run the Phoenix app
RUN addgroup -g 1000 -S "${USER}" && adduser -s /bin/sh -u 1000 -G "${USER}" \
    -h "/home/${USER}" -D "${USER}" && su "${USER}"

# Everything from this line onwards will run in the context of the unprivileged user.
USER "${USER}"

COPY --chown="${USER}":"${USER}" --from=builder /opt/app/_build/${MIX_ENV}/rel/core/ .

# # Usage:
# #  * build: sudo docker image build -t elixir/my_app .
# #  * shell: sudo docker container run --rm -it --entrypoint "" -p 127.0.0.1:4000:4000 elixir/my_app sh
# #  * run:   sudo docker container run --rm -it -p 127.0.0.1:4000:4000 --name my_app elixir/my_app
# #  * exec:  sudo docker container exec -it my_app sh
# #  * logs:  sudo docker container logs --follow --tail 100 my_app
CMD ["sh", "-c", "bin/migrate && bin/seed && bin/server"]